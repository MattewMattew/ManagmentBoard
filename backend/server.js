require('dotenv').config();
const express = require('express');
const cors = require('cors');
const knex = require('knex');
const axios = require('axios');
const moment = require('moment');
const fs = require('fs');
const config = require('./knexfile');
const { db, testConnection, migrateLatest } = require('./db');

const app = express();

app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const REDMINE_URL = process.env.REDMINE_URL || "https://helpdesk.fenix-it.ru/";
const TRACKER_URL = process.env.TRACKER_URL || "https://tracker.fenix-it.ru/";
const USERS = [369, 338, 207, 84, 86, 14, 83, 73, 164];
const STATUS_IDS = [1, 4, 8, 9, 10, 11, 12, 13, 27, 15, 16, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
async function initializeDatabase() {
  const isConnected = await testConnection();
  if (!isConnected) {
    process.exit(1);
  }
  
  await migrateLatest();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–∞–Ω–Ω—ã—Ö
async function fetchAllPages(url, headers, dataKey) {
  let allData = [];
  let offset = 0;
  const limit = 100;

  try {
    while (true) {
      const response = await axios.get(`${url}&offset=${offset}&limit=${limit}`, { headers });
      const data = response.data;
      
      if (!data[dataKey] || data[dataKey].length === 0) break;
      
      allData = [...allData, ...data[dataKey]];
      offset += limit;

      console.log(`Fetched ${allData.length} items so far from ${dataKey}...`);
      console.log(`Current offset: ${offset}, Total count: ${data.total_count}`);
      
      if (offset >= data.total_count) break;
    }
    
    return allData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return [];
  }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/check-api-keys', (req, res) => {
  const helpdeskExists = fs.existsSync("helpdesk_key.txt");
  const trackerExists = fs.existsSync("tracker_key.txt");
  res.json({ helpdesk_exists: helpdeskExists, tracker_exists: trackerExists });
});

app.post('/save-api-keys', (req, res) => {
  try {
    const { helpdesk_key, tracker_key } = req.body;
    
    if (helpdesk_key) {
      fs.writeFileSync("helpdesk_key.txt", helpdesk_key);
    }
    
    if (tracker_key) {
      fs.writeFileSync("tracker_key.txt", tracker_key);
    }
    
    res.json({ success: true, message: '–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á —Å Redmine
app.get('/sync-issues', async (req, res) => {
  try {
    const helpdeskKey = fs.readFileSync("helpdesk_key.txt", "utf8").trim();
    const headers = {
      "Content-Type": "application/json",
      "X-Redmine-API-Key": helpdeskKey
    };
    console.log(`Using Redmine API Key: ${helpdeskKey}`);
    const filterUrl = `${REDMINE_URL}/issues.json?f[]=project_id&op[project_id]=%21&v[project_id][]=26&v[project_id][]=28&v[project_id][]=34&v[project_id][]=32&v[project_id][]=35&f[]=created_on&op[created_on]=>=&v[created_on][]=2023-10-30&limit=100`;
    console.log(`Fetching issues from: ${filterUrl}`);
    const issues = await fetchAllPages(filterUrl, headers, 'issues');
    console.log(`Fetched ${issues.length} issues from Redmine`);

    // –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    const batchSize = 100;
    for (let i = 0; i < issues.length; i += batchSize) {
      const batch = issues.slice(i, i + batchSize);
      console.log(`Processing batch ${Math.floor(i / batchSize) + 1} of ${Math.ceil(issues.length / batchSize)}`);
      await db.transaction(async trx => {
        for (const issue of batch) {
          const createdOn = issue.created_on ? moment(issue.created_on).toDate() : null; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º created_on –≤ –¥–∞—Ç—É
          await trx('issues')
            .insert({
              redmine_id: issue.id,
              data: JSON.stringify(issue),
              created_at: createdOn, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏–∑ created_on
              updated_at: db.fn.now()
            })
            .onConflict('redmine_id') // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø–æ redmine_id
            .merge(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        }
      });
    }

    res.json({ success: true, count: issues.length });
  } catch (error) {
    console.error('Error in /sync-issues:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/issues', async (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  res.setHeader('Cache-Control', 'no-cache');
  try {
    const issues = await db('issues').select('*');
    res.json(
      issues.map(issue => ({
        ...issue,
        data: typeof issue.data === 'string' ? JSON.parse(issue.data) : issue.data
      }))
    );
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
initializeDatabase().then(() => {
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });
});